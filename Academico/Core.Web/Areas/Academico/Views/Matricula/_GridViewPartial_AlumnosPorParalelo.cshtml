@using System.Web.UI.WebControls;
@{
    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "GridViewPartial_AlumnosPorParalelo";
        settings.CallbackRouteValues = new { Controller = "Matricula", Action = "GridViewPartial_AlumnosPorParalelo" };
        settings.Width = Unit.Percentage(100);
        settings.KeyFieldName = "IdAlumno";
        //Configuración para que la grilla no muestre texto completo
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;

        //Configuracion responsive
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;

        //Configuración scrolling y pager
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = 400;
        settings.SettingsPager.Visible = true;
        settings.SettingsPager.PageSize = 10;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.AlwaysShowPager = true;
        //Configuración filtro por columna
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsExport.RenderBrick = (sender, e) =>
        {
            if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
        };
        //Evento para pintar de rojo las filas anuladas
        settings.HtmlRowPrepared = (s, e) =>
        {
            if (Convert.ToBoolean(e.GetValue("EsRetirado")) == true)
            {
                e.Row.ForeColor = System.Drawing.Color.Red;
            }
        };
        settings.Columns.Add("IdMatricula", "ID").Width = Unit.Percentage(10);
        settings.Columns.Add(column =>
        {
            column.FieldName = "Fecha";
            column.Caption = "Fecha";
            column.PropertiesEdit.DisplayFormatString = "{0:dd/MM/yyyy}";
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add("pe_cedulaRuc", "Identificación").Width = Unit.Percentage(10);
        settings.Columns.Add("pe_nombreCompleto", "Estudiante").Width = Unit.Percentage(50);
        settings.Columns.Add("EsRetiradoString", "Retirado").Width = Unit.Percentage(10);

        settings.ClientSideEvents.BeginCallback = "function(s, e) { e.customArgs['TransaccionFixed'] = $('#IdTransaccionSession').val(); }";
    });
}
@grid.Bind(Model).GetHtml()
