@using System.Web.UI.WebControls;
@{
    var grid = Html.DevExpress().GridView(settings => {
        settings.Name = "GridViewPartial_MatriculaRubro";
        settings.CallbackRouteValues = new { Controller = "Matricula", Action = "GridViewPartial_MatriculaRubro" };
        settings.Width = Unit.Percentage(100);
        settings.KeyFieldName = "IdString";
        //Configuración para que la grilla no muestre texto completo
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.NextColumn;

        //Configuracion responsive
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;

        //Configuración scrolling y pager
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = 400;
        settings.SettingsPager.Visible = true;
        settings.SettingsPager.PageSize = 10;
        settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
        settings.SettingsPager.AlwaysShowPager = true;
        //Configuración filtro por columna
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.SettingsExport.RenderBrick = (sender, e) =>
        {
            if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
        };

        settings.Columns.Add(column =>
        {
            column.FieldName = "Periodo";
            column.Caption = "Periodo";
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "NomRubro";
            column.Caption = "Rubro";
            column.Width = Unit.Percentage(30);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "pr_descripcion";
            column.Caption = "Producto";
            column.Width = Unit.Percentage(30);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Total";
            column.Caption = "Total";
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add(column =>
        {
            column.Width = Unit.Percentage(10);
            column.FieldName = "FechaFacturacion";
            column.Caption = "Fecha Facturación";
            column.PropertiesEdit.DisplayFormatString = "{0:dd/MM/yyyy}";
            column.EditorProperties().DateEdit(sp =>
            {

            });
            column.EditFormSettings.Visible = DefaultBoolean.True;
        });

        settings.ClientSideEvents.BeginCallback = "function(s, e) { e.customArgs['TransaccionFixed'] = $('#IdTransaccionSession').val(); }";
    });
}
@grid.Bind(Model).GetHtml()
