@using System.Web.UI.WebControls;
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridViewPartial_CobranzaMasivaDet";
        settings.CallbackRouteValues = new { Controller = "CobranzaMasiva", Action = "GridViewPartial_CobranzaMasivaDet", Area = "CuentasPorCobrar" };
        settings.Width = Unit.Percentage(100);
        settings.KeyFieldName = "Secuencia";
        settings.Width = Unit.Percentage(100);

        //settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        //settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "NotaDebitoCreditoMasiva", Action = "EditingAddNew", Area = "Facturacion" };
        //settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "NotaDebitoCreditoMasiva", Action = "EditingUpdate", Area = "Facturacion" };
        //settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "NotaDebitoCreditoMasiva", Action = "EditingDelete", Area = "Facturacion" };

        //Configuración para que la grilla no muestre texto completo
        settings.SettingsBehavior.AllowEllipsisInText = true;
        settings.SettingsResizing.ColumnResizeMode = ColumnResizeMode.Control;

        settings.CommandColumn.ShowNewButtonInHeader = false;
        settings.CommandColumn.Visible = false;

        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowEditButton = false;
        settings.CommandColumn.ShowDeleteButton = false;

        settings.SettingsContextMenu.RowMenuItemVisibility.EditRow = false;

        settings.SettingsContextMenu.Enabled = true;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.SettingsBehavior.EnableCustomizationWindow = true;

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        //Configuracion responsive
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCellsWindowLimit;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 500;

        //Configuracion exportacion
        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;
        settings.Toolbars.Add(t =>
        {
            t.EnableAdaptivity = true;
            t.Items.Add(GridViewToolbarCommand.ExportToPdf).Text = "Exportar a PDF";
            t.Items.Add(GridViewToolbarCommand.ExportToXls).Text = "Exportar a XLS";
            t.Items.Add(GridViewToolbarCommand.ExportToXlsx).Text = "Exportar a XLSX";
            t.Items.Add(GridViewToolbarCommand.ExportToDocx).Text = "Exportar a DOCX";
            t.Items.Add(GridViewToolbarCommand.ExportToRtf).Text = "Exportar a RTF";
            t.Items.Add(GridViewToolbarCommand.ExportToCsv).Text = "Exportar a CSV";
        });

        //Configuración filtro por columna
        settings.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        //Funcion para inicializar fila al presionar nuevo
        settings.InitNewRow = (s, e) =>
        {
            e.NewValues["IdAlumno"] = 0;
        };
        settings.SettingsExport.RenderBrick = (sender, e) =>
        {
            if (e.RowType == GridViewRowType.Data && e.VisibleIndex % 2 == 0)
                e.BrickStyle.BackColor = System.Drawing.Color.FromArgb(0xEE, 0xEE, 0xEE);
        };
        settings.HtmlRowPrepared = (s, e) =>
        {
            if (Convert.ToBoolean(e.GetValue("ExisteAlumno")) == false)
            {
                e.Row.ForeColor = System.Drawing.Color.Red;
            }
            if (Convert.ToBoolean(e.GetValue("Repetido")) == true)
            {
                e.Row.ForeColor = System.Drawing.Color.Orange;
            }
            if (Convert.ToBoolean(e.GetValue("ValorIgual")) == false)
            {
                e.Row.ForeColor = System.Drawing.Color.Red;
            }
        };
        settings.Columns.Add(column =>
        {
            column.FieldName = "CodigoAlumno";
            column.Caption = "Código";
            column.Width = Unit.Percentage(10);
            column.VisibleIndex = 1;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "NombreAlumno";
            column.Caption = "Estudiante";
            column.Width = Unit.Percentage(30);
            column.VisibleIndex = 2;
            column.EditFormSettings.Visible = DefaultBoolean.False;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Fecha";
            column.Caption = "Fecha";
            column.VisibleIndex = 3;
            column.PropertiesEdit.DisplayFormatString = "{0:dd/MM/yyyy}";
            column.Width = Unit.Percentage(10);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Valor";
            column.Caption = "Valor";
            column.Width = Unit.Percentage(10);
            column.VisibleIndex = 4;
            column.PropertiesEdit.DisplayFormatString = "{0:n2}";
            column.EditorProperties().SpinEdit(q =>
            {
                q.MinValue = 0;
                q.DisplayFormatString = "{0:n2}";
                q.Width = Unit.Percentage(100);
                q.AllowMouseWheel = false;
            });
        });
        settings.Columns.Add(column =>
        {
            column.Caption = "";
            column.SetDataItemTemplateContent(tc =>
            {
                if (Convert.ToBoolean(DataBinder.Eval(tc.DataItem, "Error")) == true)
                {
                    ViewContext.Writer.Write("<span class=\"glyphicon glyphicon-remove-circle\" style=\"color: red\" title=\"No existe alumno o cliente\"></span>");
                }
                else
                {
                    ViewContext.Writer.Write("<span class=\"glyphicon glyphicon-ok-circle\" style=\"color: green\"></span>");
                }
            });
            column.VisibleIndex = 5;
            column.Width = Unit.Percentage(5);
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "ErrorDetalle";
            column.Caption = "Detalle del error";
            column.Width = Unit.Percentage(30);
            column.VisibleIndex = 6;
        });

        settings.ClientSideEvents.BeginCallback = "function(s, e) { e.customArgs['TransaccionFixed'] = $('#IdTransaccionSession').val(); }";
    });
}
@grid.Bind(Model).GetHtml()