@model Core.Info.CuentasPorCobrar.cxc_cobro_Info
@{
    ViewBag.Title = "Nuevo cobro";
    if (string.IsNullOrEmpty(Core.Web.Helps.SessionFixed.IdUsuario) || string.IsNullOrEmpty(Core.Web.Helps.SessionFixed.IdEmpresa))
    {
        Response.Redirect("~/Account/Login");
    }
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/ValidacionBotonSubmit.js"></script>

<script type="text/javascript">
    var selectedIDs;
    $(function () {
        GetIdCajaPorSucursal();
        MostrarDatosTarjeta();

        var num = Number($("#cr_saldo").val());
        if (num > 0) {
            $("#DivTipoNota").show();
        }else
            $("#DivTipoNota").hide();

        $("#IdCobro_tipo").change(function () {
            SetCobroTipo();
            MostrarDatosTarjeta();
        });


        $("#cr_TotalCobro").keyup(function () {
            CalcularSaldo();
        });

        SetCobroTipo();
        $("#IdSucursal").change(function () {
            GetIdCajaPorSucursal();
        });

        $("#IdCaja").change(function () {
            GetIdCajaPorSucursal();
        });
    })

    function MostrarDatosTarjeta() {

        var TipoCobro = $("#IdCobro_tipo").val();
        if (TipoCobro == "TARJ")
        {
            $("#DatoIdTarjeta").show();
            $("#DatoTarjeta").show();
        }
        else
        {
            $("#DatoIdTarjeta").hide();
            $("#DatoTarjeta").hide();
        }
    }

    function SetCobroTipo() {

        var tipo_cobro = $("#IdCobro_tipo").val();

        $("#div_bancos").hide();
        $("#div_cheque").hide();
        if (tipo_cobro == "CHQF" || tipo_cobro == "CHQV") {
            $("#div_cheque").show();
        }else
            if (tipo_cobro == "DEPO") {
                $("#div_bancos").show();
            }
    }

    function OnBeginCallback(s, e) {
        //Pass all selected keys to GridView callback action
        e.customArgs["selectedIDs"] = selectedIDs;
    }
    function OnSelectionChanged(s, e) {
        s.GetSelectedFieldValues("secuencia", GetSelectedFieldValuesCallback);
    }
    function GetSelectedFieldValuesCallback(values) {
        //Capture all selected keys
        selectedIDs = values.join(',');
    }
    function MostrarModal() {
            selectedIDs = "";
            var datos = {
                IdTransaccionSession: $("#IdTransaccionSession").val(),
                IdEmpresa: $("#IdEmpresa").val(),
                IdSucursal: $("#IdSucursal").val(),
                IdCliente: 0,
                IdAlumno: IdAlumno.GetValue()
            }
            $.ajax({
                type: 'POST',
                data: JSON.stringify(datos),
                url: '@Url.Action("GetListFacturas_PorIngresar", "Cobranza", new { Area = "CuentasPorCobrar" })',
                async: false,
                bDeferRender: true,
                bProcessing: true,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    if(data > 0)
                    {
                        GridView_cobranza_facturas_x_cruzar.PerformCallback();
                        GridView_cobranza_facturas_x_cruzar.UnselectRows();
                        $("#FacturasModal").modal("show");
                    }else
                    {
                        alert("El estudiante no tiene documentos pendientes de cobrar");
                    }
                },
                error: function (error) {
                }
            });
    }

    function GetIdCajaPorSucursal() {
        var datos = {
            IdEmpresa: $("#IdEmpresa").val(),
            IdSucursal: $("#IdSucursal").val()
        }

        $.ajax({
            type: 'POST',
            data: JSON.stringify(datos),
            url: '@Url.Action("GetIdCajaPorSucursal", "Cobranza", new { Area = "CuentasPorCobrar" })',
            async: false,
            bDeferRender: true,
            bProcessing: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                console.log(data);
                if (data > 0) {
                    $('#IdCaja').val(data);
                }
            },
            error: function (error) {
            }
        });
    };
    function AddFacturas() {
        var datos = {
            IDs: selectedIDs,
            TotalACobrar: $("#cr_TotalCobro").val(),
            IdTransaccionSession: $("#IdTransaccionSession").val()
        }
        $.ajax({
            type: 'POST',
            data: JSON.stringify(datos),
            url: '@Url.Action("EditingAddNewFactura", "Cobranza",new { Area = "CuentasPorCobrar"})',
            async: false,
            bDeferRender: true,
            bProcessing: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $("#cr_saldo").val(data);
                if (data > 0) {
                    $("#DivTipoNota").show();
                }else
                    $("#DivTipoNota").hide();
            },
            error: function (error) {
            }
        });
        selectedIDs = "";
        GridView_cobranza_facturas_x_cruzar.PerformCallback();
        GridView_cobranza_facturas_x_cruzar.UnselectRows();
        GridView_cobranza_det.PerformCallback();
        $("#FacturasModal").modal("hide");
    }

    function CalcularSaldo() {

        var datos = {
            TotalACobrar: $("#cr_TotalCobro").val(),
            IdTransaccionSession: $("#IdTransaccionSession").val()
        }
        $.ajax({
            type: 'POST',
            data: JSON.stringify(datos),
            url: '@Url.Action("CalcularSaldo", "Cobranza",new { Area = "CuentasPorCobrar"})',
            async: false,
            bDeferRender: true,
            bProcessing: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $("#cr_saldo").val(data);
                if (data > 0) {
                    $("#DivTipoNota").show();
                }else
                    $("#DivTipoNota").hide();
            },
            error: function (error) {
            }
        });
    }

        function VaciarLista() {

            var datos = {
                IdTransaccionSession: $("#IdTransaccionSession").val()
        }
        $.ajax({
            type: 'POST',
            data: JSON.stringify(datos),
            url: '@Url.Action("VaciarLista", "Cobranza",new { Area = "CuentasPorCobrar"})',
            async: false,
            bDeferRender: true,
            bProcessing: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {

            },
            error: function (error) {
            }
        });
        GridView_cobranza_det.PerformCallback();
        }

    function CrearModificarAlumno() {
        var location = GetPathServer();
        if(IdAlumno.GetValue() > 0)
        {
            var win = window.open(location + "/Academico/Alumno/Modificar?IdEmpresa=" +@Core.Web.Helps.SessionFixed.IdEmpresa+"&IdAlumno=" + IdAlumno.GetValue(), '_blank');
            win.focus();
        }else
        {
            var win = window.open(location + "/Academico/Alumno/Nuevo?IdEmpresa=" +@Core.Web.Helps.SessionFixed.IdEmpresa, '_blank');
            win.focus();
        }
    }

    function SetDatosAlumno() {
        var datos = {
            IdEmpresa: $("#IdEmpresa").val(),
            IdAlumno: IdAlumno.GetValue()
        }
        $.ajax({
            type: 'POST',
            data: JSON.stringify(datos),
            url: '@Url.Action("SetAlumno", "Cobranza",new { Area = "CuentasPorCobrar"})',
            async: false,
            bDeferRender: true,
            bProcessing: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                $("#DatosAlumno").val(data.DatosAlumno);
                $("#cr_TotalCobro").val(data.Saldo);
                CalcularSaldo();

                if (data.Saldo == 0) {
                    alert("El estudiante no tiene documentos pendientes de cobrar");
                }
                if(data.mensajeInfo!=""){
                    $("#MensajeInformativo").show();
                    $("#MensajeInfo").html(data.mensajeInfo);

                    var location = GetPathServer();
                    var win = window.open(location + "/CuentasPorCobrar/ConciliacionNC/Nuevo?IdEmpresa=" +@Core.Web.Helps.SessionFixed.IdEmpresa+"&IdAlumno=" + IdAlumno.GetValue(), '_self');

                    win.focus();
                }

            },
            error: function (error) {
            }
        });
    }

</script>


@using (Html.BeginForm("Nuevo", "Cobranza", FormMethod.Post, new { @class = "form", @role = "form" }))
{
    @Html.HiddenFor(q => q.IdTransaccionSession, new { @id = "IdTransaccionSession" })
    @Html.HiddenFor(q => q.IdEmpresa)
    if (@ViewBag.mensaje != null)
    {
        <div class="alert alert-warning alert-dismissible">
            <h4>
                <i class="icon fa fa-warning"></i> @ViewBag.mensaje
            </h4>
        </div>
    }
    <div class="row" id="MensajeInformativo" hidden>
        <div class="col-md-12">
            <div class="callout callout-info">
                <h4>
                    <i class="icon fa fa-exclamation"></i> <label id="MensajeInfo"></label>
                </h4>
            </div>
        </div>
    </div>
    <div class="modal fade" id="FacturasModal" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Facturas</h4>
                </div>
                <div class="modal-body">

                    @Html.Action("GridViewPartial_cobranza_facturas_x_cruzar")

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="AddFacturas();">Aceptar</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
                </div>
            </div>

        </div>
    </div>
    @Html.HiddenFor(q => q.IdEmpresa)
    <div class="row">
        <div class="col-md-8">
            <div class="col-md-12">
                <div class="form-group">
                    <label for="IdSucursal">Sucursal*</label>
                    @Html.DropDownListFor(q => q.IdSucursal, new SelectList(ViewBag.lst_sucursal, "IdSucursal", "Su_Descripcion"), new { @class = "form-control", @id = "IdSucursal" })
                    @Html.ValidationMessageFor(q => q.IdSucursal, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-10">
                <div class="form-group">
                    <label for="IdCliente">Estudiante*</label>
                    @Html.Partial("_CmbAlumno_Cobranza", Model.IdAlumno)
                    @Html.ValidationMessageFor(q => q.IdAlumno, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="IdCliente"></label>
                    <button type="button" class="btn btn-primary form-control " onclick="CrearModificarAlumno();">
                        <i class="fa fa-external-link-square"></i>
                    </button>
                </div>
            </div>
            <div class="col-md-10">
                <div class="form-group">
                    @Html.TextBoxFor(q=> q.DatosAlumno, new { @id = "DatosAlumno", @readonly = "readonly", @class = "form-control" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="IdCobro_tipo">Tipo cobro*</label>
                    @Html.DropDownListFor(q => q.IdCobro_tipo, new SelectList(ViewBag.lst_cobro_tipo, "IdCobro_tipo", "tc_descripcion"), new { @class = "form-control", @id = "IdCobro_tipo" })
                    @Html.ValidationMessageFor(q => q.IdCobro_tipo, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6" id="DivTipoNota" hidden>
                <div class="form-group">
                    <label for="">Tipo nota</label>
                    @Html.DevExpress().ComboBoxFor(q => q.IdTipoNotaCredito, settings =>
                           {
                               settings.Name = "IdTipoNotaCredito";
                               settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                               settings.Properties.DisplayFormatString = "[{0}] - {1}";
                               settings.Properties.Columns.Add("IdTipoNota", "ID").Width = System.Web.UI.WebControls.Unit.Percentage(20);
                               settings.Properties.Columns.Add("No_Descripcion", "Descripción").Width = System.Web.UI.WebControls.Unit.Percentage(80);
                               //Campo ID
                               settings.Properties.ValueField = "IdTipoNota";
                               settings.Properties.ValueType = typeof(int);
                               settings.Properties.TextField = "No_Descripcion";
                               settings.Properties.NullText = "== Seleccione ==";
                               settings.Properties.DropDownStyle = DropDownStyle.DropDown;
                           }).BindList(ViewBag.lst_tipo_nota).GetHtml()
                    @Html.ValidationMessageFor(q => q.IdTipoNotaCredito, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-4">
        <div class="col-md-offset-6 col-md-6">
            <div class="form-group">
                <label for="cr_fecha">Fecha*</label>
                @Html.DevExpress().DateEditFor(q=> q.cr_fecha, settings =>
            {
                settings.Name = "cr_fecha";
                settings.Properties.UseMaskBehavior = true;
                settings.Properties.EditFormat = EditFormat.Date;
                settings.Properties.EditFormatString = "dd/MM/yyyy";
                settings.Properties.TimeSectionProperties.TimeEditProperties.EditFormat = EditFormat.Date;
                settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
            }).GetHtml()
                @Html.ValidationMessageFor(q => q.cr_fecha, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-12">
            <div class="form-group">
                <label for="IdCaja">Caja*</label>
                @Html.DropDownListFor(q => q.IdCaja, new SelectList(ViewBag.lst_caja, "IdCaja", "ca_Descripcion"), new { @class = "form-control", @id = "IdCaja" })
                @Html.ValidationMessageFor(q => q.IdCaja, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label for="cr_TotalCobro">Total*</label>
                @Html.TextBoxFor(q => q.cr_TotalCobro, new { @id = "cr_TotalCobro", @class = "form-control" })
                @Html.ValidationMessageFor(q => q.cr_TotalCobro, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label for="cr_saldo">Excedente</label>
                @Html.TextBoxFor(q => q.cr_saldo, new { @id = "cr_saldo", @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(q => q.cr_saldo, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6" id="DatoIdTarjeta" hidden>
            <div class="form-group">
                <label for="cr_TotalCobro">Tarjeta de Crédito</label>
                @Html.DropDownListFor(q => q.IdTarjeta, new SelectList(ViewBag.lst_tarjeta, "IdTarjeta", "NombreTarjeta"), new { @class = "form-control", @id = "IdTarjeta" })
                @Html.ValidationMessageFor(q => q.IdTarjeta, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6" id="DatoTarjeta" hidden>
            <div class="form-group">
                <label for="cr_saldo">Numero</label>
                @Html.TextBoxFor(q => q.cr_Tarjeta, new { @id = "cr_Tarjeta", @class = "form-control" })
                @Html.ValidationMessageFor(q => q.cr_Tarjeta, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    </div>
    <div class="row" id="div_cheque" hidden>
        <div class="col-md-12">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="cr_Banco">Banco*</label>
                    @Html.DropDownListFor(q => q.cr_Banco, new SelectList(ViewBag.lst_banco, "ba_descripcion", "ba_descripcion"), new { @class = "form-control", @id = "cr_Banco" })
                    @Html.ValidationMessageFor(q => q.cr_Banco, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="cr_cuenta">Cuenta*</label>
                    @Html.TextBoxFor(q => q.cr_cuenta, new { @id = "cr_cuenta", @class = "form-control" })
                    @Html.ValidationMessageFor(q => q.cr_cuenta, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="cr_NumDocumento"># Cheque*</label>
                    @Html.TextBoxFor(q => q.cr_NumDocumento, new { @id = "cr_NumDocumento", @class = "form-control" })
                    @Html.ValidationMessageFor(q => q.cr_NumDocumento, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>

    <div class="row" id="div_bancos" hidden>
        <div class="col-md-12">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="IdBanco">Cuenta bancaria*</label>
                    @Html.DropDownListFor(q => q.IdBanco, new SelectList(ViewBag.lst_banco_cuenta, "IdBanco", "ba_descripcion"), new { @class = "form-control", @id = "IdBanco" })
                    @Html.ValidationMessageFor(q => q.IdBanco, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-12">
                <div class="form-group">
                    <label for="pf_observacion">Observación</label>
                    @Html.TextBoxFor(q => q.cr_ObservacionPantalla, new { @class = "form-control" })
                    @Html.ValidationMessageFor(q => q.cr_ObservacionPantalla, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-12">
                <button type="button" class="btn btn-primary" title="Buscar facturas" id="btn_buscar" onclick="MostrarModal();">
                    <i class="fa fa-search"></i>
                </button>
            </div>
        </div>
    </div>
    <br />

    @Html.Action("GridViewPartial_cobranza_det")


    <div class="box-footer">
        <button type="submit" class="btn btn-primary">Guardar</button>
        <a class="btn btn-default" href="@Url.Action("Index", "Cobranza", new { Area = "CuentasPorCobrar" }, null)">Cancelar</a>
    </div>
    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
}

